# bot.py
import os
import logging
import requests
from urllib.parse import unquote
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEB_APP_URL = os.getenv("https://shop-miniapp.onrender.com")
API_URL = os.getenv("API_URL") or f"https://shop-miniapp.onrender.com/api/save-user"

# --- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- —Å–æ–∑–¥–∞—ë–º Application –≥–ª–æ–±–∞–ª—å–Ω–æ ---
application = Application.builder().token(TELEGRAM_TOKEN).build()


# === Handlers ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args:
        arg = args[0]
        if arg.startswith("webapp_auth"):
            return await handle_webapp_auth(update, arg)
        elif arg.startswith("complete_profile"):
            return await handle_complete_profile(update)
    await show_main_menu(update)

async def handle_webapp_auth(update: Update, arg: str):
    return_url = unquote(arg.split("_", 2)[-1]) if "_" in arg else WEB_APP_URL
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        [KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=return_url))]
    ]
    await update.message.reply_text(
        "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_complete_profile(update: Update):
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        [KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∏–º—è")]
    ]
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.effective_user
    data = {
        "id": user.id,
        "first_name": user.first_name or contact.first_name,
        "last_name": user.last_name or "",
        "username": user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "phone": contact.phone_number,
        "auth_date": update.message.date.timestamp()
    }
    try:
        r = requests.post(API_URL, json=data)
        if r.ok:
            await update.message.reply_text("‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    data = {
        "id": user.id,
        "first_name": text,
        "last_name": user.last_name or "",
        "username": user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "phone": "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "auth_date": update.message.date.timestamp()
    }
    try:
        r = requests.post(API_URL, json=data)
        if r.ok:
            await update.message.reply_text(f"‚úÖ –ò–º—è {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def show_main_menu(update: Update):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebApp –¥–ª—è –≤—Ö–æ–¥–∞.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)

# --- —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_error_handler(error_handler)
