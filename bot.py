import os
import logging
import requests
from urllib.parse import unquote
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from dotenv import load_dotenv
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEB_APP_URL = os.getenv("WEB_APP_URL") or "https://shop-miniapp.onrender.com"
API_URL = os.getenv("API_URL", f"https://shop-miniapp.onrender.com/api/save-user")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or f"https://shop-miniapp.onrender.com/webhook"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args:
        param = args[0]
        if param.startswith("webapp_auth"):
            return await handle_webapp_auth(update, param)
        elif param.startswith("complete_profile"):
            return await handle_complete_profile(update)
    await show_main_menu(update)


async def handle_webapp_auth(update: Update, arg: str):
    return_url = unquote(arg.split("_", 2)[-1]) if "_" in arg else WEB_APP_URL
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        [KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=return_url))],
    ]
    await update.message.reply_text(
        "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def handle_complete_profile(update: Update):
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        [KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∏–º—è")],
    ]
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª\n"
        "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è —Ç–µ–∫—Å—Ç–æ–º",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.effective_user
    data = {
        "id": user.id,
        "first_name": user.first_name or contact.first_name or "",
        "last_name": user.last_name or "",
        "username": user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "phone": contact.phone_number,
        "auth_date": update.message.date.timestamp()
    }
    try:
        response = requests.post(API_URL, json=data)
        if response.ok:
            keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEB_APP_URL))]]
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text and not text.startswith("/"):
        user = update.effective_user
        data = {
            "id": user.id,
            "first_name": text,
            "last_name": user.last_name or "",
            "username": user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
            "phone": "–Ω–µ —É–∫–∞–∑–∞–Ω",
            "auth_date": update.message.date.timestamp()
        }
        try:
            response = requests.post(API_URL, json=data)
            if response.ok:
                keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEB_APP_URL))]]
                await update.message.reply_text(
                    f"‚úÖ –ò–º—è ¬´{text}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_main_menu(update: Update):
    keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEB_APP_URL))]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", exc_info=context.error)


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook ---
def run_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    # Webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=WEBHOOK_URL
    )


if __name__ == "__main__":
    run_bot()
